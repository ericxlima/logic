{
  "Capítulo 1 - Ideias básicas e ferramentas": [
    {
      "front": "Proposição",
      "back": "Sentenças declarativas e afirmativa ou negativa que é verdadeira ou falsa. Ex: O sol é uma estrela."
    },
    {
      "front": "Inferência",
      "back": "Processo de determinar uma verdade a partir de outra."
    },
    {
      "front": "Premissa",
      "back": "Proposição que é aceita como verdadeira sem a necessidade de prova dentro de um argumento lógico.\nEx: \nPremissa 1: \"Todos os seres humanos são mortais.\"\nPremissa 2: \"Sócrates é um ser humano.\"\nEssas premissas são usadas para deduzir a conclusão: \"Portanto, Sócrates é mortal.\""
    },
    {
      "front": "Argumento",
      "back": "Uma sequência de premissas que levam a uma conclusão.\nEx: \nPremissa 1: \"Todos os seres humanos são mortais.\"\nPremissa 2: \"Sócrates é um ser humano.\"\nConclusão: \"Portanto, Sócrates é mortal.\""
    },
    {
      "front": "Argumento Dedutivo",
      "back": "Um argumento dedutivo é uma forma de raciocínio em que a conclusão é uma inferência lógica que segue necessariamente das premissas. Se as premissas são verdadeiras, a conclusão deve ser verdadeira."
    },
    {
      "front": "Argumento Indutivo",
      "back": "É quando a conclusão é uma generalização baseada em observações ou evidências, a conclusão pode ser provável, mas não necessariamente certa."
    },
    {
      "front": "Argumento Indutivo Bom",
      "back": "Um argumento em que as premissas fornecem boas razões para se acreditar na conclusão.\nEx: Durante 10 anos, o preço das casas aumentou.\nAs taxas de emprego também aumentaram no mesmo período.\nPortanto, é provável que a valorização das casas esteja relacionada ao aumento nas taxas de emprego."
    },
    {
      "front": "Argumento Indutivo Ruim",
      "back": "Um argumento com falhas, generalizações precipitadas, amostras não representativas ou falta de evidências suficientes. \nEx: Vi cinco corvos e todos eram pretos.\nPortanto, todos os corvos são pretos."
    },
    {
      "front": "Sentença Atômica",
      "back": "Proposição atômica. São afirmações simples que não podem ser divididas em partes menores.\nEx:\n\"A Terra é redonda\" ou \"Hoje é segunda-feira\"."
    },
    {
      "front": "Variáveis",
      "back": "Uma representação sintática das sentenças atômicas, normalmente denotados por letras minúsculas como p, q, r, s, t, u, v, w, x, y, z."
    },
    {
      "front": "Constantes",
      "back": "Uma representação sintática dos valores-verdade (Verdadeiro e Falso).\nEx:\nV e F\nT, ⊥.\n1 e 0."
    },
    {
      "front": "Conectivos",
      "back": "Um conectivo lógico é um termo usado para combinar variáveis e contantes ou alterar o significado de proposições. Os conectivos mais populares são \"¬\"(negação) \"∧\"(conjunção), \"∨\"(disjunção), \"se... então\"(implicação), \"se e somente se\"(equivalência). "
    },
    {
      "front": "Auxiliares",
      "back": "São os parênteses, colchetes e chaves usados para indicar a ordem de avaliação de uma expressão lógica. \nEx: {[(p ∧ q) ∨ r] ∨ s}"
    },
    {
      "front": "Sentenças Compostas / Complexas",
      "back": "Podem ser divididas em partes menores (as sentenças atômicas) e possuem uma estrutura lógica.\nEx:\"Eu sou legal e o dia é lindo.\""
    },
    {
      "front": "¬ \"- Sinal de Negação\"",
      "back": "O símbolo ¬ (também chamado de til ou não) é um operador lógico que denota negação. Ele inverte o valor-verdade de uma proposição. Por exemplo, se P é verdadeira, ¬P será falsa."
    },
    {
      "front": "∧ \"- Sinal de Conjunção\"",
      "back": "O símbolo ∧ (também chamado de \"E\" lógico ou operador \"E\") é usado para denotar a conjunção lógica. Em uma expressão lógica, a conjunção será verdadeira se e somente se ambas as proposições forem verdadeiras."
    },
    {
      "front": "∨ \"- Sinal de Disjunção\"",
      "back": "O símbolo ∨ (também chamado de \"OU\" lógico ou operador \"OU\") é usado para denotar a disjunção lógica. Em uma expressão lógica, a disjunção será verdadeira se pelo menos uma das proposições unidas por ∨ for verdadeira."
    },
    {
      "front": "→ \"- Sinal de Implicação\"",
      "back": "O símbolo → (também chamado de \"se... então...\" ou operador de implicação) é usado para denotar a implicação lógica. Em uma expressão lógica, a implicação é verdadeira se a proposição antecedente for falsa ou se a proposição consequente for verdadeira."
    },
    {
      "front": "↔ \"- Sinal de Bi-implicação\"",
      "back": "O símbolo ↔ (também chamado de \"se e somente se\" ou operador de equivalência) é usado para denotar a equivalência lógica. Em uma expressão lógica, a equivalência é verdadeira se as proposições unidas por ↔ tiverem o mesmo valor-verdade."
    },
    {
      "front": "⊕ \"- Sinal de Ou Exclusivo\"",
      "back": "O \"OU\" exclusivo é um tipo de disjunção, na qual a disjunção é verdadeira se apenas uma das proposições for verdadeira. Pode ser usado de forma exclusiva, o que significa que ambas as proposições não podem ser verdadeiras.\nEx: T⊕T=F, T⊕F=T, F⊕T=T, F⊕F=F"
    },
    {
      "front": "Valor-verdade",
      "back": "O valor-verdade é uma propriedade de uma proposição que indica se a proposição é verdadeira ou falsa. As proposições podem ter valores-verdade de verdadeiro (V) ou falso (F)."
    },
    {
      "front": "Tabela-verdade",
      "back": "Uma tabela-verdade é uma tabela que lista todas as combinações possíveis de valores-verdade para uma expressão lógica. Ela mostra como o valor-verdade da expressão depende dos valores-verdade de suas proposições componentes."
    },
    {
      "front": "Função-verdade",
      "back": "Uma Função-Verdade é uma regra que, quando você lhe fornece valores-verdade de entrada, ela lhe dá um valor-verdade de saída definido. \nEx: I(p)=T"
    },
    {
      "front": "Conectivo verofuncional",
      "back": "Um Conectivo Verofuncional é um conectivo definido por uma função-verdade"
    },
    {
      "front": "Componente verofuncional",
      "back": "Uma Sentença Composta Verofuncional é uma sentença composta formada com conectivos verofuncionais"
    },
    {
      "front": "Conectivo principal",
      "back": "O conectivo principal em uma expressão lógica é o operador lógico que tem a maior prioridade e afeta a estrutura da expressão. \nEx: Em (p∧q)→s, → é o conectivo principal."
    },
    {
      "front": "Satisfatível (SAT)",
      "back": "Uma expressão lógica é satisfatível se houver pelo menos uma atribuição de valores-verdade às variáveis que a torna verdadeira."
    },
    {
      "front": "Refutável (REFUT)",
      "back": "Uma expressão lógica é refutável se houver pelo menos uma atribuição de valores-verdade às variáveis que a torna falsa."
    },
    {
      "front": "Tautologia (TAUT) / Verdade Lógica",
      "back": "Uma expressão lógica é uma tautologia se todas as suas atribuições de valores-verdade a tornam verdadeira."
    },
    {
      "front": "Insatisfatível (INSAT) / Contradição",
      "back": "Uma expressão lógica é insatisfatível se nenhuma atribuição de valores-verdade às variáveis a torna verdadeira."
    }
  ],
  "Capítulo 2 - Transcrição entre Linguagem Natural e Lógica Setencial": [
    {
      "front": "Transcrição",
      "back": "A transcrição de linguagem natural para lógica é o processo de converter sentenças ou afirmações em linguagem natural em expressões lógicas ou proposições formais. Esse processo é usado para representar informações e argumentos de maneira lógica e estruturada."
    },
    {
      "front": "Transcrição Adequada",
      "back": "Uma transcrição adequada refere-se a uma conversão precisa e fiel de uma sentença em linguagem natural para uma expressão lógica. Uma transcrição adequada preserva o significado da sentença original e mantém a validade das relações lógicas."
    }
  ],
  "Capítulo 3 - Equivalência Lógica, Verdades Lógicas e Contradições": [
    {
      "front": "≡ \"- Equivalência Lógica\"",
      "back": "Duas expressões são consideradas logicamente equivalentes se para todas as atribuições possíveis de valores-verdade às variáveis envolvidas produzem os mesmos resultados."
    },
    {
      "front": "⊨ \"Consequência Lógica\"",
      "back": "Se a primeira expressão é verdadeira, então a segunda expressão também deve ser verdadeira, por consequência lógica."
    },
    {
      "front": "Diagrama de Venn",
      "back": "Um diagrama de Venn é uma representação gráfica usada para ilustrar a relação entre conjuntos e suas interseções. Pode ser usado na lógica para mostrar a relação entre conjuntos de valores-verdade de proposições."
    },
    {
      "front": "Lei da Substituição de Equivalentes Lógicos",
      "back": "A Lei da Substituição de Equivalentes Lógicos afirma que se duas expressões são logicamente equivalentes, você pode substituir uma pela outra em uma prova lógica sem afetar a validade da prova."
    },
    {
      "front": "Lei da Dupla Negação",
      "back": "A Lei da Dupla Negação afirma que a negação de uma negação de uma proposição é logicamente equivalente à proposição original.\nEm notação simbólica: ¬(¬P) ≡ P."
    },
    {
      "front": "Leis de De Morgan",
      "back": "As Leis de De Morgan são duas regras que descrevem como negar conjunções e disjunções.\nEm notação simbólica: \n¬(P∧Q) ≡ ¬P∨¬Q   e\n¬(P∨Q) ≡ ¬P∧¬Q."
    },
    {
      "front": "Leis Distributivas",
      "back": "As Leis Distributivas são regras que descrevem a distribuição de operadores lógicos.\nEm notação simbólica: \nP∧(Q∨R) ≡ (P∧Q)∨(P∧R)   e\nP∨(Q∧R) ≡ (P∨Q)∧(P∨R)."
    },
    {
      "front": "Lei da Transitividade",
      "back": "A Lei da Transitividade da Equivalência Lógica afirma que se duas expressões são logicamente equivalentes a uma terceira expressão, então as duas primeiras também são logicamente equivalentes entre si.\nEx: Se P≡Q e Q≡R, então P≡R."
    },
    {
      "front": "Leis Comutativas",
      "back": "Nas leis comutativas, a ordem de operadores como ∧ (E) e ∨ (OU) pode ser trocada sem alterar o valor-verdade da expressão.\nEm notação simbólica: \nP∧Q ≡ Q∧P   e\nP∨Q ≡ Q∨P."
    },
    {
      "front": "Lei da Associatividade",
      "back": "A Lei da Associatividade afirma que, em uma sequência de operadores do mesmo tipo (por exemplo, várias conjunções ou disjunções), a maneira como os operadores são agrupados não afeta o valor-verdade da expressão."
    },
    {
      "front": "Lei da Redundância",
      "back": "A Lei da Redundância estabelece que incluir a mesma proposição em uma conjunção ou disjunção lógica é redundante. A proposição não afeta o valor-verdade da expressão.\nEx: P∧P ≡ P e P∨P ≡ P."
    },
    {
      "front": "Lei do Conjuntor Verdade Lógica",
      "back": "A Lei do Conjuntor Verdade Lógica estabelece que uma conjunção que inclui uma proposição verdadeira é logicamente equivalente à outra proposição. \nEx: P∧V ≡ P."
    },
    {
      "front": "Lei do Disjuntor Contraditório",
      "back": "A Lei do Disjuntor Contraditório afirma que uma disjunção que inclui uma proposição falsa é logicamente equivalente à outra proposição. \nEx: P∨F ≡ P."
    },
    {
      "front": "Forma Normal Disjuntiva",
      "back": "A Forma Normal Disjuntiva é uma forma canônica de representar expressões lógicas em que as proposições são combinadas usando operadores de conjunção e disjunção. \nEx: (P∧Q)∨(¬P∧R)∨(¬Q∧¬R)."
    },
    {
      "front": "Forma Normal Conjuntiva",
      "back": "A Forma Normal Conjuntiva é uma forma canônica de representar expressões lógicas em que as proposições são combinadas usando operadores de conjunção e disjunção. \nEx: (P∨Q)∧(¬P∨R)∧(¬Q∨¬R)."
    },
    {
      "front": "Completude Funcional",
      "back": "Completude Funcional refere-se a um conjunto de operadores lógicos que pode ser usado para representar qualquer função lógica. Isso significa que, com um conjunto funcionalmente completo de operadores, é possível expressar qualquer expressão lógica em termos desses operadores."
    },
    {
      "front": "NAND",
      "back": "NAND é um operador lógico que significa \"não e\". É funcionalmente completo, o que significa que pode ser usado para representar qualquer função lógica. A saída de uma operação NAND é falsa apenas quando ambas as entradas são verdadeiras.\nEx:A ∨ B ≡ (A NAND A) NAND (B NAND B)"
    }
  ],
  "Capítulo 4 - Validade e Condicionais": [
    {
      "front": "Argumento Dedutivo Inválido",
      "back": "É quando não é logicamente possível chegar à conclusão a partir das premissas.\nEx: Todos os homens são mortais. (premissa)\nTodos os mamíferos são mortais. (premissa)\nPortanto, homens são mamíferos. (conclusão)"
    },
    {
      "front": "Argumento Dedutivo Válido",
      "back": "É quando é logicamente possível chegar à conclusão a partir das premissas.\nEx:Todas as aranhas tem 6 patas. (premissa)\nSeres de 6 patas tem asas. (premissa)\nPortanto, aranhas tem asas. (conclusão)"
    },
    {
      "front": "Contra-exemplo",
      "back": "Um contra-exemplo é um exemplo específico que mostra que um argumento é inválido. É uma instância em que as premissas são verdadeiras, mas a conclusão é falsa, demonstrando a invalidade do argumento."
    },
    {
      "front": "Lei da Contraposição",
      "back": "A Lei da Contraposição estabelece que o contraposto de um condicional é logicamente equivalente ao condicional negado. Em outras palavras, inverter e negar as proposições de um condicional não altera seu valor-verdade. <img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/c15ba6d5df532833d6369c0bc800442f65162777\" />"
    },
    {
      "front": "Lei do Bicondicional",
      "back": "A Lei do Bicondicional afirma que um bicondicional é verdadeiro apenas quando ambas as proposições têm o mesmo valor-verdade. Se ambas são verdadeiras ou ambas são falsas, o bicondicional é verdadeiro."
    }
  ],
  "Capítulo 5 - Fundamentos da Dedução Natural para Lógica Sentencial": [
    {
      "front": "Derivação",
      "back": "A derivação é um processo na dedução natural em que se busca deduzir uma conclusão válida a partir de premissas usando regras de inferência e suposições. É um método sistemático para estabelecer a validade de um argumento lógico."
    },
    {
      "front": "Subderivação",
      "back": "Uma subderivação é uma derivação interna a uma derivação maior. É frequentemente usada para justificar suposições temporárias e aplicar regras de inferência dentro de um escopo específico."
    },
    {
      "front": "Linha de escopo",
      "back": "Uma linha de escopo é usada para indicar a área em que uma suposição temporária ou subderivação se aplica. Ela ajuda a identificar o alcance de regras de inferência específicas dentro da derivação."
    },
    {
      "front": "Suposição ou Hipótese ou Assunção",
      "back": "Uma suposição é uma proposição temporária assumida durante uma derivação para fins de raciocínio. As suposições são usadas para justificar a aplicação de regras de inferência e são geralmente descartadas quando não são mais necessárias."
    },
    {
      "front": "Regra de inferência",
      "back": "Uma regra de inferência é uma diretriz ou princípio que governa o processo de dedução. Elas especificam como se pode justificar a conclusão de um argumento com base nas premissas dadas e nas regras lógicas."
    },
    {
      "front": "Dispensar uma suposição",
      "back": "Dispensar uma suposição é o processo de encerrar uma suposição temporária que não é mais necessária na derivação. Isso pode ser feito quando a suposição não contribui mais para a prova da conclusão."
    },
    {
      "front": "Eliminação da Implicação",
      "back": "A → B\nA\n_____\nB"
    },
    {
      "front": "Introdução da Implicação",
      "back": "Dado uma subderivação com a hipótese A, se B for verdadeiro, então A -> B é verdadeiro.\n_____\nA -> B"
    },
    {
      "front": "Introdução da Conjunção",
      "back": "A\nB\n_____\nA ∧ B"
    },
    {
      "front": "Eliminação da Conjunção",
      "back": "A ∧ B\n_____\nA\n<b>ou</b>\nA ∧ B\n_____\nB"
    },
    {
      "front": "Introdução da Disjunção",
      "back": "A\n_____\nA ∨ B\n<b>ou</b>\nB\n_____\nA ∨ B"
    },
    {
      "front": "Eliminação da Disjunção",
      "back": "A ∨ B\n¬A\n_____\nB\n<b>ou</b>\nA ∨ B\n¬B\n_____\nA"
    },
    {
      "front": "Introdução do Bicondicional",
      "back": "A → B\nB → A\n_____\nA ⇔ B"
    },
    {
      "front": "Eliminação do Bicondicional",
      "back": "A ⇔ B\n_____\nA → B\nB → A"
    },
    {
      "front": "Introdução da Negação",
      "back": "Se uma suposição A leva a uma contradição, então a negação da suposição é verdadeira.\n_____\n¬A"
    },
    {
      "front": "Eliminação da Negação",
      "back": "¬¬A\n_____\nA"
    },
    {
      "front": "Reiteração",
      "back": "É uma regra de inferência que permite afirmar novamente uma proposição já derivada em uma derivação ou subderivação dentro de seu escopo, reafirmando sua verdade."
    }
  ],
  "Capítulo 6 - Estratégias em Dedução Natural para Lógica Sentencial": [
    {
      "front": "Conectivo Principal",
      "back": "O Conectivo Principal de uma sentença composta é o conectivo que foi usado por último na construção da sentençaa partir de seu(s) componente(s)."
    },
    {
      "front": "Regras Primitivas de Inferência",
      "back": "Uma regra primitiva, também conhecida como regra básica, é uma regra de inferência fundamental em dedução natural que não depende de regras derivadas. Elas são as regras mais simples e essenciais do sistema de dedução."
    },
    {
      "front": "Conclusão de Conjunção",
      "back": "Se a conclusão de um argumento é uma conjunção A ∧ B, você pode usar a regra de introdução da conjunção. Isso envolve provar cada parte da conjunção separadamente."
    },
    {
      "front": "Conclusão de Disjunção",
      "back": "Se a conclusão de um argumento é uma disjunção A ∨ B, você pode usar a regra de introdução da disjunção. Isso envolve provar A ou B e usar a regra para garantir a conclusão."
    },
    {
      "front": "Conclusão de Implicação",
      "back": "Se a conclusão de um argumento é uma implicação A → B, você pode usar a regra de introdução da implicação. Isso envolve criar uma subderivação com a hipótese A e provar B dentro dessa subderivação."
    },
    {
      "front": "Conclusão de Bicondicional",
      "back": "Se a conclusão de um argumento é um bicondicional A ⇔ B, você pode usar a regra de introdução do bicondicional. Isso envolve criar duas subderivações, uma com a hipótese A (que leve à B) e outra com a hipótese B (que leve à A), e provar A ⇔ B dentro dessas subderivações."
    },
    {
      "front": "Conclusão de Negação",
      "back": "Se a conclusão de um argumento é uma negação ¬A, você pode usar a regra de introdução da negação. Isso envolve criar uma subderivação com a hipótese A e provar uma contradição dentro dessa subderivação."
    },
    {
      "front": "Estratégia Reductio Ad Absurdum",
      "back": "A estratégia Reductio ad Absurdum é uma técnica de dedução que envolve a suposição de uma hipótese negada e a busca de uma contradição a partir dessa suposição. Se a suposição leva a uma conclusão falsa ou contraditória, a hipótese negada é considerada verdadeira. (Ou vice-versa)"
    },
    {
      "front": "Dispensar uma Suposição",
      "back": "Dispensar uma suposição é uma estratégia em dedução natural que envolve encerrar uma suposição temporária que não é mais necessária na derivação. Isso é feito quando a suposição não contribui mais para a prova da conclusão."
    }
  ],
  "Capítulo 7 - Regras Derivadas e Derivações sem Premissas em Dedução Natural": [
    {
      "front": "Regra Derivada",
      "back": "Uma regra derivada é uma regra de inferência em dedução natural que é construída com base em regras primitivas e outras regras derivadas. Elas são desenvolvidas para simplificar a derivação de argumentos mais complexos."
    },
    {
      "front": "Regra Derivada do Enfraquecimento",
      "back": "Dado A, podemos criar uma hipótese B, reiterar o A, e concluir que B implica em A, enfraquecendo a premissa A.\nA\n______\nB→A"
    },
    {
      "front": "Regra Derivada do Argumento por Casos",
      "back": "A ∨ B\nA → Z\nB → Z\n______\nZ"
    },
    {
      "front":"Regra Derivada da Eliminação do Bicondicional",
      "back": "A → B\nA\n_______\nB\n<b>ou</b>\nA → B\nB\n_______\nA"
    },
    {
      "front": "Regra Derivada de Eliminação da Disjunção",
      "back": "¬A ∨ B\nA\n______\nB\n<b>ou</b>\nA ∨ ¬B\nB\n______\nA"
    },
    {
      "front": "Regra Derivada Modus Tolens (Negação do Consequente)",
      "back": "A → B\n¬B\n______\n¬A\n<b>ou</b>\nA → ¬B\nB\n______\n¬A\n<b>ou</b>\n¬A → B\n¬B\n______\nA"
    },
    {
      "front": "Regra Derivada Reductio Ad Absurdum",
      "back": "Se uma suposição ¬A leva a uma contradição, posso concluir A"
    },
    {
      "front": "Regra Derivada de De Morgan",
      "back": "¬(A ∧ B)\n______\n¬A ∨ ¬B\n<b>ou</b>\n¬(A ∨ B)\n______\n¬A ∧ ¬B"
    },
    {
      "front": "Regra Derivada da Contraposição",
      "back": "A → B\n______\n¬B → ¬A\n<b>ou</b>\n¬A → B\n______\n¬B → A\n<b>ou</b>\n¬A → B\n______\n¬B → A"
    },
    {
      "front": "Regras Derivada da Eliminação da Implicação",
      "back": "A → B\n______\n¬A ∨ B\n<b>ou</b>\n¬(A → B)\n______\nA ∧ ¬B"
    },
    {
      "front": "Derivações sem Premissas",
      "back": "São derivações autocontidas. Por exemplo, se eu tenho A, posso concluir A ∨ ¬A. Ou se eu tiver outra premissa B, e quiser incluir um C, posso criar uma subderivação com a hipótese C, reiterar C, e concluir C → C, dessa forma pela regra derivada da eliminação da implicação teremos ¬C ∨ C."
    }
  ],
  "Capítulo 8: Fundamentos de Tableaux para Lógica Sentencial": [
    {
      "front": "Tableaux",
      "back": "Uma técnica de prova usada na lógica sentencial para determinar a validade de argumentos. Ela envolve a construção de uma árvore de decisão para verificar a verdade ou falsidade de proposições lógicas, a partir da conjunção de todas as premissas com a negação da conclusão."
    },
    {
      "front": "Contra-exemplo",
      "back": "Um exemplo específico que refuta a validade de um argumento. Se um contra-exemplo puder ser encontrado, o argumento não é válido. Em uma tabela-verdade, um contra-exemplo é uma linha em que todas as premissas são verdadeiras e a conclusão é falsa."
    },
    {
      "front": "Regra que causa bifurcação (ramificação)",
      "back": "Uma regra no método de Tableaux que leva a uma ramificação do caminho da prova, geralmente devido a operadores como a disjunção (∨)."
    },
    {
      "front": "Regra que não causa bifurcação (ramificação)",
      "back": "Uma regra no método de Tableaux que não resulta em novos ramos do caminho da prova, geralmente usada com operadores como a negação (¬)."
    },
    {
      "front": "Ramo fechado (ou Caminho)",
      "back": "Indica que o conjunto de fórmulas do ramo leva a uma contradição, o que significa que o argumento é inválido e portanto não deve-se continuar a prova por este ramo."
    },
    {
      "front": "Ramo aberto (ou Caminho)",
      "back": "É aquele que ainda pode ser estendido com novas fórmulas sem levar a uma contradição, indicando que o argumento ainda não foi refutado."
    },
    {
      "front": "Regra ¬¬",
      "back": "Uma regra de Tableaux usada para lidar com negações duplas (¬¬) em uma fórmula, simplificando a fórmula para uma única negação (¬)."
    },
    {
      "front": "Regra ∧",
      "back": "Uma regra de Tableaux usada para lidar com a conjunção (∧) em uma fórmula, bifurcando o caminho da prova em dois ramos, cada um tratando de uma das duas conjunções."
    },
    {
      "front": "Regra ¬∧",
      "back": "Uma regra de Tableaux usada para lidar com a negação de uma conjunção (¬∧) em uma fórmula, transformando-a em duas negações separadas, uma para cada parte da conjunção."
    },
    {
      "front": "Regra ∨",
      "back": "Uma regra de Tableaux usada para lidar com a disjunção (∨) em uma fórmula, bifurcando o caminho da prova em dois ramos, cada um tratando de uma das duas disjunções."
    },
    {
      "front": "Regra ¬∨",
      "back": "Uma regra de Tableaux usada para lidar com a negação de uma disjunção (¬∨) em uma fórmula, simplificando-a em duas negações separadas, uma para cada parte da disjunção."
    },
    {
      "front": "Regra ⇒",
      "back": "Uma regra de Tableaux usada para lidar com o condicional (=⇒) em uma fórmula, bifurcando o caminho da prova em dois ramos, um para a antecedente e outro para a consequente do condicional."
    },
    {
      "front": "Regra ¬ ⇒",
      "back": "Uma regra de Tableaux usada para lidar com a negação de um condicional (¬ =⇒) em uma fórmula, simplificando-a em uma negação da antecedente ou uma afirmação da consequente."
    },
    {
      "front": "Regra ⇐⇒",
      "back": "Uma regra de Tableaux usada para lidar com o bicondicional (⇐⇒) em uma fórmula, bifurcando o caminho da prova em dois ramos, um para cada direção do bicondicional."
    },
    {
      "front": "Regra ¬ ⇐⇒",
      "back": "Uma regra de Tableaux usada para lidar com a negação de um bicondicional (¬ ⇐⇒) em uma fórmula, simplificando-a em uma negação de uma das direções do bicondicional."
    }
  ],
  "Capítulo 9: Aplicações de Tableaux para Lógica Sentencial": [
    {
      "front": "Teste com Tableaux para Verdade Lógica",
      "back": "O teste com Tableaux para verdade lógica envolve usar regras de Tableaux para mostrar que uma fórmula é uma tautologia, ou seja, é verdadeira logicamente em todas as situações possíveis."
    },
    {
      "front": "Teste com Tableaux para Contradições",
      "back": "O teste com Tableaux para contradições envolve usar regras de Tableaux para mostrar que uma fórmula é uma contradição, ou seja, é sempre falsa, independentemente das situações possíveis."
    },
    {
      "front": "Teste com Tableaux para Equivalência Lógica",
      "back": "O teste com Tableaux para equivalência lógica envolve usar regras de Tableaux para mostrar que duas fórmulas são logicamente equivalentes, ou seja, têm o mesmo valor-verdade em todas as situações possíveis."
    },
    {
      "front": "Consistência",
      "back": "Um conjunto de fórmulas é considerado consistente se existe ao menos uma atribuição de valores-verdade às variáveis que torna todas as fórmulas do conjunto verdadeiras."
    },
    {
      "front": "Modelo",
      "back": "Um modelo é uma interpretação que atribui valores-verdade às variáveis e satisfaz todas as fórmulas de um conjunto de fórmulas, tornando-o consistente."
    },
    {
      "front": "Conjunto Infinito de Sentenças",
      "back": "Um conjunto de sentenças que contém uma quantidade infinita de fórmulas. O uso de Tableaux com conjuntos infinitos pode ser desafiador."
    },
    {
      "front": "Teste de Consistência com Tableaux para um Conjunto Finito de Sentenças",
      "back": "O teste de consistência com Tableaux para um conjunto finito de sentenças envolve determinar se um conjunto finito de fórmulas é consistente, ou seja, se existe uma atribuição de valores-verdade que torna todas as fórmulas verdadeiras."
    }
  ]
}
